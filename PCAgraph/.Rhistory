valpropres[x] { print eigen(A)$values[x]/(sum(eigen(A)$values)) }
for(x in 1:length(valpropres))
print eigen(A)$values[x]/(sum(eigen(A)$values)) }
for(x in 1:length(valpropres))
{ test <- eigen(A)$values[x]/(sum(eigen(A)$values))
print test }
for (i in 1:length(valpropres)) {
print(eigen(A)$values[i]/(sum(eigen(A)$values)))
}
table(A)
A
while (i <= 90){
j<-sum(eigen(A)$values[i]/(sum(eigen(A)$values)))
print(j)
}
for (i in 1:length(valpropres)){
while (j <= 90)
j<-sum(eigen(A)$values[i]/(sum(eigen(A)$values)))
print(j)
}
for (i in 1:length(valpropres)){
j<-sum(eigen(A)$values[i]/(sum(eigen(A)$values)))
} while (j <= 90) {
print(j)
}
for (i in 1:length(valpropres)){
j<-sum(eigen(A)$values[i]/(sum(eigen(A)$values)))
while (j <= 90)
print(j)
}
for (i in 1:length(valpropres)){
j<-sum(eigen(A)$values[i]/(sum(eigen(A)$values)))
if (j > 90)
print(j)
}
help.start()
for (i in 1:length(valpropres))
ifelse(j<90,sum(eigen(A)$values[i]/(sum(eigen(A)$values), break)
for (i in 1:length(valpropres))
ifelse(j<90, sum(eigen(A)$values[i]/(sum(eigen(A)$values), break)
for (i in 1:length(valpropres)) {
if (j <= 90){
j <- (sum(eigen(A)$values[i]/(sum(eigen(A)$values))))
print(j)
}
}
for (i in 1:length(valpropres)) {
if (j <= 90){
j <- (sum(eigen(A)$values[i]/sum(eigen(A)$values) ))
print(j)
}
}
j = 0
for (i in 1:length(valpropres)) {
if (j <= 90){
j <- j + (eigen(A)$values[i]/sum(eigen(A)$values))
print(j)
}
}
j = 0
for (i in 1:length(valpropres)) {
if (j <= 90){
j <- j + (eigen(A)$values[i]/sum(eigen(A)$values))
print(j)
} else print("stop")
}
j
for (i in 1:length(valpropres)) {
if (j <= 90){
j <- j + (eigen(A)$values[i]/sum(eigen(A)$values))
print(j)
} else print("why")
}
for (i in 1:length(valpropres)) {
if (j <= 90){
j <- j + (eigen(A)$values[i]/sum(eigen(A)$values))
print(j)
} else print("why")
}
for (i in 1:length(valpropres)) {
if (j <= 90){
j <- j + (eigen(A)$values[i]/sum(eigen(A)$values))
print(j)
} else print("why")
}
vecteigen(A)$vectors
vectpropres <- eigen(A)$vectors
vectpropres
class(vectpropres)
for (i in 1:length(valpropres)) {
if (eigen(A)$values[i]/sum(eigen(A)$values) < 90) {
eigen(A)$values[i]/sum(eigen(A)$values)
} else print("why")
}
for (i in 1:length(valpropres)) {
if (eigen(A)$values[i]/sum(eigen(A)$values) < 90) {
eigen(A)$values[i]/sum(eigen(A)$values)
} else { print("why") }
}
for (i in 1:length(valpropres)) {
if (eigen(A)$values[i]/sum(eigen(A)$values) < 90) {
eigen(A)$values[i]/sum(eigen(A)$values)
print("ok")
} else { print("why") }
}
for (i in 1:length(valpropres)) {
if (eigen(A)$values[i]/sum(eigen(A)$values) < 90) {
test <- eigen(A)$values[i]/sum(eigen(A)$values) + eigen(A)$values[i+1]/sum(eigen(A)$values)
print("test")
} else { print("why") }
}
for (i in 1:length(valpropres)) {
if (eigen(A)$values[i]/sum(eigen(A)$values) < 90) {
test <- eigen(A)$values[i]/sum(eigen(A)$values) + eigen(A)$values[i+1]/sum(eigen(A)$values)
print(test)
} else { print("why") }
}
for (i in 1:length(valpropres)) {
if (test < 90) {
test <- eigen(A)$values[i]/sum(eigen(A)$values) + eigen(A)$values[i+1]/sum(eigen(A)$values)
print(test)
} else { print("why") }
}
test <- eigen(A)$values[1]/sum(eigen(A)$values)
for (i in 1:length(valpropres)) {
if (test < 90) {
test <- eigen(A)$values[i]/sum(eigen(A)$values) + eigen(A)$values[i+1]/sum(eigen(A)$values)
print(test)
} else { print("why") }
}
varexpl <- eigen(A)$values/sum(eigen(A)$values)
varexpl
eigen(A)$values
valpropres
varexpl <- valpropres/sum(valpropres)
varexpl
sum(valpropres)
2/4
valpropres[1]/sum(valpropres)
varexpl <- valpropres[]/sum(valpropres)
varexpl
varexpl <- valpropres/sum(valpropres)
for (i in 1:length(valpropres)) {
if (varexpl[i] < .90) {
test <- varexpl[i]) + varexpl[i+1]
print(test)
} else { print("why") }
}
varexpl <- valpropres/sum(valpropres)
for (i in 1:length(valpropres)) {
if (varexpl[i] < .90) {
test <- varexpl[i] + varexpl[i+1]
print(test)
} else { print("why") }
}
varexpl <- valpropres/sum(valpropres)
for (i in 1:length(valpropres)) {
test <- varexpl[i] + varexpl[i+1]
if (test < .90) {
print(test)
} else { print("why") }
}
varexpl <- valpropres/sum(valpropres)
for (i in 1:length(valpropres)) {
if (varexpl[i] < .90) {
test <- varexpl[i] + varexpl[i+1]
print(test)
} else { print("why") }
}
cumsum(valpropres)
cumsum(varexpl)
sommevarexpl <- cumsum(varexpl)
sommevarexpl
cut(sommevarexpl, 2
)
sommevarexpl[(sommevarexpl < .90)+1]
sommevarexpl[sommevarexpl < .90]
sommevarexpl[(sommevarexpl < .90)
]
sommevarexpl[(sommevarexpl =< .90)}
sommevarexpl[(sommevarexpl =< .90)]
sommevarexpl[(sommevarexpl <= .90)]
sommevarexpl[(sommevarexpl <= .90)]
#Étape 0. Indiquer l'espace de travail et charger les données dans la matrice D
setwd("~/Desktop/R_mydirectory/devoir1")
D <- matrix(scan("Q1_donnees.dat"),15,9,byrow=TRUE)
#Étape 1. Centrer les données sur la moyenne en créant la matrice dprime
moyligne <- rowMeans(D)
dprime <- D-moyligne
#Étape 2. Calculer la matrice de variance de dprime, appelée A
A <- (1/length(dprime)) * dprime %*% t(dprime)
#Étape 3. Trouver les valeurs et vecteurs propres unitaires de A, jusqu'à une représentation de 90% de la variance
valpropres <- eigen(A)$values
vectpropres <- eigen(A)$vectors
varexpl <- valpropres/sum(valpropres)
sommevarexpl <- cumsum(varexpl)
valpropres
eigen(A)
A
varexpl
cumsum(varexpl)
cumsum(varexpl[1])
cumsum(varexpl[2])
cumsum(varexpl[1:2])
for (i in 1:length(varexpl)) {
if (cumsum(varexpl[1:i]) < .90) {
print(cumsum(varexpl[1:i]))
} else { print("why") }
}
for (i in 1:length(varexpl)) {
if (cumsum(varexpl[1:i]) < .90) {
print(cumsum(varexpl[1:i]))
} else { print("why") }
}
i <- vector(numeric, length(varexpl))
i <- vector(mode="numeric", length= "length(varexpl)")
i <- vector(mode=numeric, length=length(varexpl))
i <- vector(mode=numeric, length=15)
i <- vector(mode= "numeric", length= "15")
i
i <- vector(mode= "numeric", length= "15")
x <- cumsum(varexpl[i])
for (i in 1:length(varexpl)) {
if (x < .90) {
print(cumsum(varexpl[1:i]))
} else { print("why") }
}
x <- cumsum(varexpl[1])
for (i in 1:length(varexpl)) {
if (cumsum(varexpl[1:i]) < .90) {
print(cumsum(varexpl[1:i]))
} else { print("why") }
}
x <- cumsum(varexpl)
for (i in 1:length(varexpl)) {
if (x < .90) {
print(cumsum(varexpl[1:i]))
} else { print("why") }
}
x <- cumsum(varexpl)
for (i in 1:length(varexpl)) {
if (x < .90) {
print(cumsum(varexpl[1:i]))
} else { print("why") }
}
x <- cumsum(varexpl)
for (i in 1:length(varexpl)) {
if (x[i] < .90) {
print(cumsum(varexpl[1:i]))
} else { print("why") }
}
x <- cumsum(varexpl)
for (i in 1:length(varexpl)) {
if (x[i+1] < .90) {
print(cumsum(varexpl[1:i]))
} else { print("why") }
}
x <- cumsum(varexpl)
for (i in 1:length(varexpl)) {
if (x[i] < .90) {
print(cumsum(varexpl[1:i+1]))
} else { print("why") }
}
x <- cumsum(varexpl)
for (i in 1:length(varexpl)) {
if (x[i] < .90) {
print(cumsum(varexpl[1:i]))
} else { print("why") }
}
x <- cumsum(varexpl)
for (i in 1:length(varexpl)) {
if (x[i] < .90) {
print(cumsum(varexpl[1:(i+1)]))
} else { print("why") }
}
x <- cumsum(varexpl)
for (i in 1:length(varexpl)) {
if (x[i] < .90) {
W <- (cumsum(varexpl[1:(i+1)]))
print(W)
} else { print("why") }
}
W
x <- cumsum(varexpl)
for (i in 1:length(varexpl)) {
if (x[i] < .90) {
W <- (cumsum(varexpl[1:(i+1)]))
print(W)
print(vectpropres[1:(i+1)])
} else { print("why") }
}
vectpropres
x <- cumsum(varexpl)
for (i in 1:length(varexpl)) {
if (x[i] < .90) {
W <- (cumsum(varexpl[1:(i+1)]))
print(W)
print(vectpropres[,1:(i+1)])
} else { print("why") }
}
x <- cumsum(varexpl)
for (i in 1:length(varexpl)) {
if (x[i] < .90) {
(cumsum(varexpl[1:(i+1)]))
W <- (vectpropres[,1:(i+1)])
print(W)
}
}
Wt <- t(W)
Wt
dpca <- dprime %*% wt
dpca <- dprime %*% Wt
dprime
D
dpca <- dprime * Wt
dpca <- dprime * Wt
dpca <- dprime %*% Wt
class(dprime)
class(Wt)
dpca <- Wt %*% dprime
dpca
plot(dpca[1,], Dpca[2,], cex=0.8, xlim=c(-6,6), ylim=c(-6,6))
text(dpca[1,], Dpca[2,], paste(round(dpca[1,],2), round(dpca[2,],2), sep=", "), cex=.8, pos=1)
plot(dpca[1,], dpca[2,], cex=0.8, xlim=c(-6,6), ylim=c(-6,6))
text(dpca[1,], dpca[2,], paste(round(dpca[1,],2), round(dpca[2,],2), sep=", "), cex=.8, pos=1)
plot(dpca[1,], dpca[2,], cex=0.8,)
text(dpca[1,], dpca[2,], paste(round(dpca[1,],2), round(dpca[2,],2), sep=", "), cex=.8, pos=1)
plot(dpca[,1], dpca[,2], cex=0.8,)
plot(dpca[,1], dpca[,2], cex=0.8,)
dpcq
dpca
plot(dpca[1,], dpca[2,], cex=0.8,)
plot(dpca[1,], dpca[2,], cex=0.8,)
text(dpca[1,], dpca[2,], paste(round(dpca[1,],2), round(dpca[2,],2), sep=", "), cex=.8, pos=1)
#Étape 0. Indiquer l'espace de travail et charger les données dans la matrice D
setwd("~/Desktop/R_mydirectory/devoir1")
D <- matrix(scan("Q1_donnees.dat"),15,9,byrow=TRUE)
#Étape 1. Centrer les données sur la moyenne en créant la matrice dprime
moyligne <- rowMeans(D)
dprime <- D-moyligne
#Étape 2. Calculer la matrice de variance de dprime, appelée A
A <- (1/length(dprime)) * dprime %*% t(dprime)
#Étape 3. Trouver les valeurs et vecteurs propres unitaires de A, jusqu'à une représentation de 90% de la variance
valpropres <- eigen(A)$values
vectpropres <- eigen(A)$vectors
varexpl <- valpropres/sum(valpropres)
sommevarexpl <- cumsum(varexpl)
#Étape 4. Créer la matrice W des vecteurs propres unitaires, jusqu'à 90% et en ordre décroissant (ce que R fait automatiquement),
# puis calculer la matrice transposée orthogonale  qui permettra la rotation des données initiales
x <- cumsum(varexpl)
for (i in 1:length(varexpl)) {
if (x[i] < .90) {
(cumsum(varexpl[1:(i+1)]))
W <- (vectpropres[,1:(i+1)])
print(W)
}
}
Wt <- t(W)
Wt
#Étape 5. Calculer la matrice transformée dpca en multipliant la matrice centrée dprime avec la matrice de rotation, Wt
dpca <- Wt %*% dprime
dpca
plot(dpca[1,], dpca[2,], cex=0.8,)
text(dpca[1,], dpca[2,], paste(round(dpca[1,],2), round(dpca[2,],2), sep=", "), cex=.8, pos=1)
plot(dpca[1,], dpca[2,], cex=0.8, abline(0,), abline(,0))
plot(dpca[1,], dpca[2,], cex=0.8, abline=(0,), abline=(,0))
plot(dpca[1,], dpca[2,], cex=0.8, abline(0))
plot(dpca[1,], dpca[2,], cex=0.8, abline())
plot(dpca[1,], dpca[2,], cex=0.8, abline(0,0))
plot(dpca[1,], dpca[2,], cex=0.8, abline(0,0), abline(0))
plot(dpca[1,], dpca[2,], cex=0.8, abline(0,0), abline(1,0))
plot(dpca[1,], dpca[2,], cex=0.8, abline(0,0), abline(1,0))
plot(dpca[1,], dpca[2,], cex=0.8, abline(0,0), abline(2,0))
plot(dpca[1,], dpca[2,], cex=0.8, abline(0,0), abline(2,4))
text(dpca[1,], dpca[2,], paste(round(dpca[1,],2), round(dpca[2,],2), sep=", "), cex=.8, pos=1)
plot(dpca[1,], dpca[2,], cex=0.8, xlim=c(-7,7), ylim=c(-7,7)))
plot(dpca[1,], dpca[2,], cex=0.8, xlim=c(-7,7), ylim=c(-7,7))
text(dpca[1,], dpca[2,], paste(round(dpca[1,],2), round(dpca[2,],2), sep=", "), cex=.8, pos=1)
plot(dpca[1,], dpca[2,], cex=0.8, xlim=c(-8,8), ylim=c(-8,8))
plot(dpca[1,], dpca[2,], cex=0.8, xlim=c(-8,8), ylim=c(-8,8))
text(dpca[1,], dpca[2,], paste(round(dpca[1,],2), round(dpca[2,],2), sep=", "), cex=.8, pos=1)
plot(dpca[1,], dpca[2,], cex=0.8, xlim=c(-8,8), ylim=c(-5,5))
text(dpca[1,], dpca[2,], paste(round(dpca[1,],2), round(dpca[2,],2), sep=", "), cex=.8, pos=1)
ggplot(dpca, aes(x=cyt, y-hwy))
library("ggplot2", lib.loc="~/Library/R/3.2/library")
ggplot(dpca, aes(x=cyt, y-hwy))
ggplot(as.data.frame(dpca), aes(x=cyt, y-hwy))
ggplot(as.data.frame(dpca), aes(x=cyt, y-hwy))
ggplot(as.data.frame(dpca), aes(x=cyt, y=hwy))
ggplot(as.data.frame(dpca), aes(x=cty, y=hwy))
ggplot(as.data.frame(dpca), aes(x=cty, y=hwy))
ggplot(as.data.frame(dpca), aes(x=dpca[1,], y=dpca[2,]))
str(diamonds)
ggplot(as.data.frame(dpca), aes(x=[1,], y=[2,]))
p <- ggplot(as.data.frame(dpca), aes(x=dpca[1,], y=dpca[2,]))
p
p + geom_point( )
datadpca <- as.data.frame(dpca)
p <- ggplot(dpca, aes(x=dpca[1,], y=dpca[2,]))
p <- ggplot(datadpca, aes(x=dpca[1,], y=dpca[2,]))
p
p + geom_point()
p <- ggplot(datadpca, aes(x=datadpca[1,], y=datadpca[2,]))
p + geom_point()
head(datadpca)
p <- ggplot(datadpca, aes(x=1, y=2))
p + geom_point()
p + geom_jitter()
x
x <- dpca[1,]
y <- dpca[2,]
p <- ggplot(datadpca, aes(x=x, y=y))
p + geom_point()
class(datadpca)
datadpca
for (i in c(1:9) noms<-(paste("exp", i)))
noms <- ("exp1","exp2","exp3","exp4","exp5","exp6","exp7","exp8", "exp9")
noms <- c("exp1","exp2","exp3","exp4","exp5","exp6","exp7","exp8", "exp9")
nomes
noms
datadpca <- as.data.frame(dpca, row.names=noms)
datadpcq
datadpca
colnames(datadpca) <- noms
datadpca
row.names(datadpca) <- c("group1", "group2")
datadpca
dpca <- Wt %*% dprime
dpca
## Étape 6. Visualisation des données et constatation des groupes principaux
##
noms <- c("exp1","exp2","exp3","exp4","exp5","exp6","exp7","exp8", "exp9")
datadpca <- as.data.frame(dpca, row.names=noms)
colnames(datadpca) <- noms
row.names(datadpca) <- c("group1", "group2")
p <- ggplot(datadpca, aes(group1, group2))
p + geom_point()
datadpca
p <- ggplot(datadpca, aes("group1", "group2"))
p + geom_point()
p <- ggplot(datadpca, aes(datadpcq[1,], datadpcq[2,]))
p + geom_point()
p <- ggplot(datadpca, aes(group1))
p + geom_point()
datadpca <- as.data.frame(t(dpca))
colnames(datadpca) <- c("group1", "group2")
datadpca
p <- ggplot(datadpca, aes(group1, group2)
p + geom_point()
p <- ggplot(datadpca, aes(group1, group2) + geom_point()
p <- ggplot(datadpca, aes(group1)
p <- ggplot(datadpca, aes(group1))
p+geom_point()
p <- ggplot(datadpca, aes(group1, group2))
p+geom_point()
p <- ggplot(datadpca, aes(group1, group2, color=group1))
p+geom_point()
p+scale_color_discrete()
p <- ggplot(datadpca, aes(group1, group2, color=group1))
p+geom_point()
p+scale_color_discrete(values = c("skyblue", "blue", "navy"),)
p <- ggplot(datadpca, aes(group1, group2, color=group1))
p+scale_color_discrete(values = c("skyblue", "blue", "navy"))
p <- ggplot(datadpca, aes(group1, group2, color=group1))
p+geom_point()
p <- ggplot(datadpca, aes(group1, group2, color=group1))
p+geom_point()
p <- ggplot(datadpca, aes(group1, group2, color=group1))
p+geom_point()
p+ geom_label(position="nudge")
p <- ggplot(datadpca, aes(group1, group2, color=group1))
p+geom_point()
p+ geom_text(aes(label=group1))
p <- ggplot(datadpca, aes(group1, group2, color=group1))
p+geom_point() + geom_text(aes(label=group1))
p <- ggplot(datadpca, aes(group1, group2, color=group1))
p+geom_point() + geom_text(aes(label=round(group1),2), nudge_x = 1)
p <- ggplot(datadpca, aes(group1, group2, color=group1))
p+geom_point() + geom_text(aes(label=round(group1),2), nudge_x = .01)
p <- ggplot(datadpca, aes(group1, group2, color=group1))
p+geom_point() + geom_text(aes(label=round(group1),2),)
p <- ggplot(datadpca, aes(group1, group2, color=group1))
p+geom_point() + geom_text(aes(label=round(group1)),)
p <- ggplot(datadpca, aes(group1, group2, color=group1))
p+geom_point() + geom_text(aes(label=round(group1),2),)
p <- ggplot(datadpca, aes(group1, group2, color=group1))
p+geom_point() + geom_text(aes(label=round(group1))
)
p <- ggplot(datadpca, aes(group1, group2, color=group1))
p+geom_point() + geom_text(aes(label=round(group1, group2))
)
p <- ggplot(datadpca, aes(group1, group2, color=group1))
p+geom_point() + geom_text(aes(label=round(group1, group2), check_overlap=FALSE)
)
p <- ggplot(datadpca, aes(group1, group2, color=group1))
p+geom_point()
p <- ggplot(datadpca, aes(group1, group2, color=group1))
p+geom_point() + geom_text(label=(group1, group2))
p <- ggplot(datadpca, aes(group1, group2, color=group1))
p+geom_point() + geom_text(aes(label=c(group1, group2)))
p <- ggplot(datadpca, aes(group1, group2, color=group1))
p+geom_point() + geom_text(aes(label=paste(group1, group2)))
p <- ggplot(datadpca, aes(group1, group2, color=group1))
p+geom_point() + geom_text(aes(label=paste(round(group1, digits=1), round(group2, digits=1))))
p <- ggplot(datadpca, aes(group1, group2, color=group1))
p+geom_point() + geom_text(aes(label=paste(round(group1, digits=1), round(group2, digits=1)), position="jitter"))
p <- ggplot(datadpca, aes(group1, group2, color=group1))
p+geom_point() + geom_text(aes(label=paste(round(group1, digits=1), round(group2, digits=1))), position="jitter")
p <- ggplot(datadpca, aes(group1, group2, color=group1))
p+geom_point() + geom_text(aes(label=paste(round(group1, digits=1), round(group2, digits=1))), position="stack")
A
vectpropres
