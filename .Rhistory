eigen(A)
eigen(A)$vectors
#4. Créer la matrice W en ordre décroissant des vecteurs propres et sa transposée Wt
W<-matrix(eigen(A)$vectors, nrow=2, ncol=2)
Wt<-t(W)
#5. Rotation des données par la matrice Wt
Dpca <- Wt %*% Dprime
Dpca
plot(Dpca[1,], Dpca[2,])
#6. fraction de variance de la composante principale
eigen(A)$values[1]/(eigen(A)$values[1]+eigen(A)$values[2])
plot(x1,x2)
#ACP
# 1. Centrer les données sur la moyenne
x1<-c(4.61, -0.2,	9.44,	3.02,	2.21, 0.78, 7.47, -0.59)
x1
x2 <-c(6.32, 2.1, 10.31, 2.97, 5.86, 2.19, 8.98, 2.68)
x2
plot(x1,x2)
moyx1<-mean(x1)
moyx1
moyx2<-mean(x2)
moyx2
x1prime<-(x1-moyx1)
x1prime
x2prime<-(x2-moyx2)
x2prime
##indiquer le nombre de lignes de la matrice D'
Dprime<-matrix(c(x1prime,x2prime), nrow=2, ncol=8, byrow=TRUE)
Dprime
plot(x1prime, x2prime)
#2. Calculer la matrice de covariance A
a<- var(x1)
b<- cov(x1,x2)
c<- cov(x2,x1)
d<- var(x2)
A <- matrix(c(a,b,c,d), nrow=2, ncol=2, byrow=TRUE)
A
#3.Trouver les valeurs propres lambda et les vecteurs propres unitaires (x1,x2) de A
eigen(A)
eigen(A)$vectors
#4. Créer la matrice W en ordre décroissant des vecteurs propres et sa transposée Wt
W<-matrix(eigen(A)$vectors, nrow=2, ncol=2)
Wt<-t(W)
#5. Rotation des données par la matrice Wt
Dpca <- Wt %*% Dprime
Dpca
plot(Dpca[1,], Dpca[2,])
#6. fraction de variance de la composante principale
eigen(A)$values[1]/(eigen(A)$values[1]+eigen(A)$values[2])
#ACP
# 1. Centrer les données sur la moyenne
x1<-c(3.30,	0.03,	9.68, 5.52, 4.14, 3.19, 0.07, 3.38)
x1
x2 <-c(2.51, -0.40, 7.33, 5.11, 2.96, 3.47, 0.66, 2.67)
x2
plot(x1,x2)
moyx1<-mean(x1)
moyx1
moyx2<-mean(x2)
moyx2
x1prime<-(x1-moyx1)
x1prime
x2prime<-(x2-moyx2)
x2prime
##indiquer le nombre de lignes de la matrice D'
Dprime<-matrix(c(x1prime,x2prime), nrow=2, ncol=8, byrow=TRUE)
Dprime
plot(x1prime, x2prime)
#2. Calculer la matrice de covariance A
a<- var(x1)
b<- cov(x1,x2)
c<- cov(x2,x1)
d<- var(x2)
A <- matrix(c(a,b,c,d), nrow=2, ncol=2, byrow=TRUE)
A
#3.Trouver les valeurs propres lambda et les vecteurs propres unitaires (x1,x2) de A
eigen(A)
eigen(A)$vectors
#4. Créer la matrice W en ordre décroissant des vecteurs propres et sa transposée Wt
W<-matrix(eigen(A)$vectors, nrow=2, ncol=2)
Wt<-t(W)
#5. Rotation des données par la matrice Wt
Dpca <- Wt %*% Dprime
Dpca
plot(Dpca[1,], Dpca[2,])
#6. fraction de variance de la composante principale
eigen(A)$values[1]/(eigen(A)$values[1]+eigen(A)$values[2])
> plot(Dpca[1,], Dpca[2,], cex=0.8)
> text(Dpca[1,], Dpca[2,], paste(round(Dpca[1,],2), round(Dpca[2,],2), sep=", "), cex=.8, pos=1)
#ACP
# 1. Centrer les données sur la moyenne
x1<-c(4.61, -0.2,	9.44,	3.02,	2.21, 0.78, 7.47, -0.59)
x1
x2 <-c(6.32, 2.1, 10.31, 2.97, 5.86, 2.19, 8.98, 2.68)
x2
plot(x1,x2)
moyx1<-mean(x1)
moyx1
moyx2<-mean(x2)
moyx2
x1prime<-(x1-moyx1)
x1prime
x2prime<-(x2-moyx2)
x2prime
##indiquer le nombre de lignes de la matrice D'
Dprime<-matrix(c(x1prime,x2prime), nrow=2, ncol=8, byrow=TRUE)
Dprime
plot(x1prime, x2prime)
#2. Calculer la matrice de covariance A
a<- var(x1)
b<- cov(x1,x2)
c<- cov(x2,x1)
d<- var(x2)
A <- matrix(c(a,b,c,d), nrow=2, ncol=2, byrow=TRUE)
A
#3.Trouver les valeurs propres lambda et les vecteurs propres unitaires (x1,x2) de A
eigen(A)
eigen(A)$vectors
#4. Créer la matrice W en ordre décroissant des vecteurs propres et sa transposée Wt
W<-matrix(eigen(A)$vectors, nrow=2, ncol=2)
Wt<-t(W)
#5. Rotation des données par la matrice Wt
Dpca <- Wt %*% Dprime
Dpca
plot(Dpca[1,], Dpca[2,])
#6. fraction de variance de la composante principale
eigen(A)$values[1]/(eigen(A)$values[1]+eigen(A)$values[2])
plot(x1,x2)
> plot(Dpca[1,], Dpca[2,])
plot(Dpca[1,], Dpca[2,])
v1<- c(0.89, 0.03, 11.90, 0.08, 3.71, 0.01)
sum(v1)
v1/sum(v1)
?order
v2<-v1/sum(v1)
v2
v3 <- order(v2)
v3
v3 <- sort(v2)
v3
v3 <- sort(v2, decreasing = TRUE)
v3
v3[1]+v3[2]
#ACP
# 1. Centrer les données sur la moyenne
x1<-c(3.30,	0.03,	9.68, 5.52, 4.14, 3.19, 0.07, 3.38)
x1
x2 <-c(2.51, -0.40, 7.33, 5.11, 2.96, 3.47, 0.66, 2.67)
x2
plot(x1,x2)
moyx1<-mean(x1)
moyx1
moyx2<-mean(x2)
moyx2
x1prime<-(x1-moyx1)
x1prime
x2prime<-(x2-moyx2)
x2prime
##indiquer le nombre de lignes de la matrice D'
Dprime<-matrix(c(x1prime,x2prime), nrow=2, ncol=8, byrow=TRUE)
Dprime
plot(x1prime, x2prime)
#2. Calculer la matrice de covariance A
a<- var(x1)
b<- cov(x1,x2)
c<- cov(x2,x1)
d<- var(x2)
A <- matrix(c(a,b,c,d), nrow=2, ncol=2, byrow=TRUE)
A
#3.Trouver les valeurs propres lambda et les vecteurs propres unitaires (x1,x2) de A
eigen(A)
eigen(A)$vectors
#4. Créer la matrice W en ordre décroissant des vecteurs propres et sa transposée Wt
W<-matrix(eigen(A)$vectors, nrow=2, ncol=2)
Wt<-t(W)
#5. Rotation des données par la matrice Wt
Dpca <- Wt %*% Dprime
Dpca
plot(Dpca[1,], Dpca[2,])
#6. fraction de variance de la composante principale
eigen(A)$values[1]/(eigen(A)$values[1]+eigen(A)$values[2])
#ACP
# 1. Centrer les données sur la moyenne
x1<-c(3.30,	0.03,	9.68, 5.52, 4.14, 3.19, 0.07, 3.38)
x1
x2 <-c(2.51, -0.40, 7.33, 5.11, 2.96, 3.47, 0.66, 2.67)
x2
plot(x1,x2)
moyx1<-mean(x1)
moyx1
moyx2<-mean(x2)
moyx2
x1prime<-(x1-moyx1)
x1prime
x2prime<-(x2-moyx2)
x2prime
##indiquer le nombre de lignes de la matrice D'
Dprime<-matrix(c(x1prime,x2prime), nrow=2, ncol=8, byrow=TRUE)
Dprime
plot(x1prime, x2prime)
#2. Calculer la matrice de covariance A
a<- var(x1)
b<- cov(x1,x2)
c<- cov(x2,x1)
d<- var(x2)
A <- matrix(c(a,b,c,d), nrow=2, ncol=2, byrow=TRUE)
A
#3.Trouver les valeurs propres lambda et les vecteurs propres unitaires (x1,x2) de A
eigen(A)
eigen(A)$vectors
#4. Créer la matrice W en ordre décroissant des vecteurs propres et sa transposée Wt
W<-matrix(eigen(A)$vectors, nrow=2, ncol=2)
Wt<-t(W)
#5. Rotation des données par la matrice Wt
Dpca <- Wt %*% Dprime
Dpca
plot(Dpca[1,], Dpca[2,], cex=0.8)
text(Dpca[1,], Dpca[2,], paste(round(Dpca[1,],2), round(Dpca[2,],2), sep=", "), cex=.8, pos=1)
#6. fraction de variance de la composante principale
eigen(A)$values[1]/(eigen(A)$values[1]+eigen(A)$values[2])
#ACP
# 1. Centrer les données sur la moyenne
x1<-c(3.30,	0.03,	9.68, 5.52, 4.14, 3.19, 0.07, 3.38)
x1
x2 <-c(2.51, -0.40, 7.33, 5.11, 2.96, 3.47, 0.66, 2.67)
x2
plot(x1,x2)
moyx1<-mean(x1)
moyx1
moyx2<-mean(x2)
moyx2
x1prime<-(x1-moyx1)
x1prime
x2prime<-(x2-moyx2)
x2prime
##indiquer le nombre de lignes de la matrice D'
Dprime<-matrix(c(x1prime,x2prime), nrow=2, ncol=8, byrow=TRUE)
Dprime
plot(x1prime, x2prime)
#2. Calculer la matrice de covariance A
a<- var(x1)
b<- cov(x1,x2)
c<- cov(x2,x1)
d<- var(x2)
A <- matrix(c(a,b,c,d), nrow=2, ncol=2, byrow=TRUE)
A
#3.Trouver les valeurs propres lambda et les vecteurs propres unitaires (x1,x2) de A
eigen(A)
eigen(A)$vectors
#4. Créer la matrice W en ordre décroissant des vecteurs propres et sa transposée Wt
W<-matrix(eigen(A)$vectors, nrow=2, ncol=2)
Wt<-t(W)
#5. Rotation des données par la matrice Wt
Dpca <- Wt %*% Dprime
Dpca
qplot(Dpca[1,], Dpca[2,], cex=0.8)
text(Dpca[1,], Dpca[2,], paste(round(Dpca[1,],2), round(Dpca[2,],2), sep=", "), cex=.8, pos=1)
#6. fraction de variance de la composante principale
eigen(A)$values[1]/(eigen(A)$values[1]+eigen(A)$values[2])
Dpca <- Wt %*% Dprime
Dpca
qplot(Dpca[1,], Dpca[2,], cex=0.8)
text(Dpca[1,], Dpca[2,], paste(round(Dpca[1,],2), round(Dpca[2,],2), sep=", "), pos=1)
Dpca
qplot(Dpca[1,], Dpca[2,])
text(Dpca[1,], Dpca[2,], paste(round(Dpca[1,],2), round(Dpca[2,],2), sep=", "), pos=1)
qplot(Dpca[1,], Dpca[2,])
text(Dpca[1,], Dpca[2,], paste(round(Dpca[1,],2), round(Dpca[2,],2), sep=", "), cex=.8, pos=1)
Dpca <- Wt %*% Dprime
Dpca
plot(Dpca[1,], Dpca[2,], cex=0.8)
text(Dpca[1,], Dpca[2,], paste(round(Dpca[1,],2), round(Dpca[2,],2), sep=", "), cex=.8, pos=1)
Dpca <- Wt %*% Dprime
Dpca
plot(Dpca[1,], Dpca[2,], cex=0.8)
text(Dpca[1,], Dpca[2,], paste(round(Dpca[1,],2), round(Dpca[2,],2), sep=", "), cex=.8, pos=1)
Dpca
qplot(Dpca[1,], Dpca[2,])
text(Dpca[1,], Dpca[2,], paste(round(Dpca[1,],2), round(Dpca[2,],2), sep=", "), pos=1)
plot(Dpca[1,], Dpca[2,], cex=0.8)
plot(Dpca[1,], Dpca[2,], cex=0.8)
plot(Dpca[1,], Dpca[2,], cex=0.8)
#ACP
# 1. Centrer les données sur la moyenne
x1<-c(3.30,	0.03,	9.68, 5.52, 4.14, 3.19, 0.07, 3.38)
x1
x2 <-c(2.51, -0.40, 7.33, 5.11, 2.96, 3.47, 0.66, 2.67)
x2
plot(x1,x2)
moyx1<-mean(x1)
moyx1
moyx2<-mean(x2)
moyx2
x1prime<-(x1-moyx1)
x1prime
x2prime<-(x2-moyx2)
x2prime
##indiquer le nombre de lignes de la matrice D'
Dprime<-matrix(c(x1prime,x2prime), nrow=2, ncol=8, byrow=TRUE)
Dprime
plot(x1prime, x2prime)
#2. Calculer la matrice de covariance A
a<- var(x1)
b<- cov(x1,x2)
c<- cov(x2,x1)
d<- var(x2)
A <- matrix(c(a,b,c,d), nrow=2, ncol=2, byrow=TRUE)
A
#3.Trouver les valeurs propres lambda et les vecteurs propres unitaires (x1,x2) de A
eigen(A)
eigen(A)$vectors
#4. Créer la matrice W en ordre décroissant des vecteurs propres et sa transposée Wt
W<-matrix(eigen(A)$vectors, nrow=2, ncol=2)
Wt<-t(W)
#5. Rotation des données par la matrice Wt
Dpca <- Wt %*% Dprime
Dpca
plot(Dpca[1,], Dpca[2,], cex=0.8)
text(Dpca[1,], Dpca[2,], paste(round(Dpca[1,],2), round(Dpca[2,],2), sep=", "), cex=.8, pos=1)
#6. fraction de variance de la composante principale
eigen(A)$values[1]/(eigen(A)$values[1]+eigen(A)$values[2])
install.packages("devtools")
install_github("ggbiplot", "vqv")
install.packages("install_github")
library("devtools", lib.loc="~/Library/R/3.2/library")
install.packages("githubinstall")
library(githubinstall)
install_github("ggbiplot", "vqv")
library(ggbiplot)
data(wine)
wine.pca <- prcomp(wine, scale. = TRUE)
g <- ggbiplot(wine.pca, obs.scale = 1, var.scale = 1,
groups = wine.class, ellipse = TRUE, circle = TRUE)
g <- g + scale_color_discrete(name = '')
g <- g + opts(legend.direction = 'horizontal',
legend.position = 'top')
print(g)
wine
win
wine
data(wine)
library("ggbiplot", lib.loc="~/Library/R/3.2/library")
library(deSolve)
deriv <- function(t,state,parameters){
with(as.list(c(state,parameters)),{
dx1 <- 1  - x2
dx2 <- x1 - 1
list(c(dx1,dx2)) })
}
pars <- c()
c <- c(x1 = 1, x2 = 0)
tlast <- 12
sol <- ode(y=c, func=deriv, times = seq(0,tlast,by=0.05), parms=pars)
matplot(sol[,1],sol[,2:3],type="l",xlab="time",ylab="x")
library(deSolve)
deriv <- function(t,state,parameters){
with(as.list(c(state,parameters)),{
dx1 <- 1  - x2
dx2 <- x1 - 1
list(c(dx1,dx2)) })
}
pars <- c()
c <- c(x1 = 1, x2 = 0)
tlast <- 12
sol <- ode(y=c, func=deriv, times = seq(0,tlast,by=0.05), parms=pars)
matplot(sol[,1],sol[,2:3],type="l",xlab="time",ylab="x")
install.packages("deSolve")
library("deSolve", lib.loc="~/Library/R/3.2/library")
library(deSolve)
deriv <- function(t,state,parameters){
with(as.list(c(state,parameters)),{
dx1 <- 1  - x2
dx2 <- x1 - 1
list(c(dx1,dx2)) })
}
pars <- c()
c <- c(x1 = 1, x2 = 0)
tlast <- 12
sol <- ode(y=c, func=deriv, times = seq(0,tlast,by=0.05), parms=pars)
matplot(sol[,1],sol[,2:3],type="l",xlab="time",ylab="x")
## Devoir 1 - Question 2
## Étape 0. Indiquer l'espace de travail et charger les données dans la matrice D
##
setwd("~/Desktop/R_mydirectory")
D <- matrix(scan("donneesquizz.txt"),6,6,byrow=TRUE)
D
## Étape 1. Ordonner les gènes en décroissant de différentiel d’expression
# Calculer la différence des moyennes pour chaque gène, dans chaque groupe
Ddiff <- abs(rowMeans(D[,1:3]) - rowMeans(D[,4:6]))
Dmoy <- cbind(D, Ddiff)
# Mettre en ordre décroissant
Ddec <- Dmoy[order(Dmoy[,7], decreasing= TRUE),]
## Étape 2. Marche (somme cumulative) avec le sous-groupe étudié: G1, G3, G6
# Définitions de paramètres n (nombre de données) et g (nombre de données dans le sous-ensemble)
n <- 6
g <- 2
# Valeur d'un pas positif
pp <- sqrt((n-g)/g)
pp
# Valeur d'un pas négatif
pn <- -sqrt(g/(n-g))
pn
# Fonction "marche" avec les pas calculés et les données initiales (non-permutées)
marche<-function(donnees1, donnees2)
{
x <- vector(mode="numeric", length = 7)
x
for(i in 2:length(x)){
if(all(donnees1[i-1,] == donnees2[2,])){
x[i] <- x[i-1]+pp
} else if(all(donnees1[i-1,] == donnees2[4,])){
x[i] <- x[i-1]+pp
} else {
x[i] <- x[i-1]+pn
}
}
return(x)
}
x<-marche(Ddec, Dmoy)
# Représentation graphique de la marche et du supremum
sup <- max(x)
plot(x, ylim =c(-3,3), type="b", col=ifelse(x==sup, "darkseagreen", "darkseagreen4"),
pch=ifelse(x==sup, 18, 1), cex=ifelse(x==sup, 1.5, 1))
## Devoir 1 - Question 2
## Étape 0. Indiquer l'espace de travail et charger les données dans la matrice D
##
setwd("~/Desktop/R_mydirectory")
D <- matrix(scan("donneesquizz.txt"),6,6,byrow=TRUE)
D
## Étape 1. Ordonner les gènes en décroissant de différentiel d’expression
# Calculer la différence des moyennes pour chaque gène, dans chaque groupe
Ddiff <- abs(rowMeans(D[,1:3]) - rowMeans(D[,4:6]))
Dmoy <- cbind(D, Ddiff)
# Mettre en ordre décroissant
Ddec <- Dmoy[order(Dmoy[,7], decreasing= TRUE),]
## Étape 2. Marche (somme cumulative) avec le sous-groupe étudié: G1, G3, G6
# Définitions de paramètres n (nombre de données) et g (nombre de données dans le sous-ensemble)
n <- 6
g <- 2
# Valeur d'un pas positif
pp <- sqrt((n-g)/g)
pp
# Valeur d'un pas négatif
pn <- -sqrt(g/(n-g))
pn
# Fonction "marche" avec les pas calculés et les données initiales (non-permutées)
marche<-function(donnees1, donnees2)
{
x <- vector(mode="numeric", length = 7)
x
for(i in 2:length(x)){
if(all(donnees1[i-1,] == donnees2[2,])){
x[i] <- x[i-1]+pp
} else if(all(donnees1[i-1,] == donnees2[4,])){
x[i] <- x[i-1]+pp
} else {
x[i] <- x[i-1]+pn
}
}
return(x)
}
x<-marche(Ddec, Dmoy)
# Représentation graphique de la marche et du supremum
sup <- max(x)
plot(x, ylim =c(-3,3), type="b", col=ifelse(x==sup, "darkseagreen", "darkseagreen4"),
pch=ifelse(x==sup, 18, 1), cex=ifelse(x==sup, 1.5, 1))
sup
## Devoir 1 - Question 2
## Étape 0. Indiquer l'espace de travail et charger les données dans la matrice D
##
setwd("~/Desktop/R_mydirectory")
D <- matrix(scan("donneesquizz.txt"),6,6,byrow=TRUE)
D
## Étape 1. Ordonner les gènes en décroissant de différentiel d’expression
# Calculer la différence des moyennes pour chaque gène, dans chaque groupe
Ddiff <- abs(rowMeans(D[,1:3]) - rowMeans(D[,4:6]))
Dmoy <- cbind(D, Ddiff)
# Mettre en ordre décroissant
Ddec <- Dmoy[order(Dmoy[,7], decreasing= TRUE),]
## Étape 2. Marche (somme cumulative) avec le sous-groupe étudié: G1, G3, G6
# Définitions de paramètres n (nombre de données) et g (nombre de données dans le sous-ensemble)
n <- 6
g <- 2
# Valeur d'un pas positif
pp <- sqrt((n-g)/g)
pp
# Valeur d'un pas négatif
pn <- -sqrt(g/(n-g))
pn
# Fonction "marche" avec les pas calculés et les données initiales (non-permutées)
marche<-function(donnees1, donnees2)
{
x <- vector(mode="numeric", length = 7)
x
for(i in 2:length(x)){
if(all(donnees1[i-1,] == donnees2[4,])){
x[i] <- x[i-1]+pp
} else if(all(donnees1[i-1,] == donnees2[6,])){
x[i] <- x[i-1]+pp
} else {
x[i] <- x[i-1]+pn
}
}
return(x)
}
x<-marche(Ddec, Dmoy)
# Représentation graphique de la marche et du supremum
sup <- max(x)
plot(x, ylim =c(-3,3), type="b", col=ifelse(x==sup, "darkseagreen", "darkseagreen4"),
pch=ifelse(x==sup, 18, 1), cex=ifelse(x==sup, 1.5, 1))
sup
